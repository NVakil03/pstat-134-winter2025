hp = data2$stats$base_stat[1],
attack = data2$stats$base_stat[2],
defense = data2$stats$base_stat[3],
sp_atk = data2$stats$base_stat[4],
sp_def = data2$stats$base_stat[5],
speed = data2$stats$base_stat[6],
type1 = data2$types$type$name[1],
type2 = data2$types$type$name[2]))
}
url <- data$results$url[i]
res = GET(url)
data2 = fromJSON(rawToChar(res$content))
test[i,] = rbind(data.frame(name = data2$name,
base_experience = data2$base_experience,
height = data2$height,
weight = data2$weight,
hp = data2$stats$base_stat[1],
attack = data2$stats$base_stat[2],
defense = data2$stats$base_stat[3],
sp_atk = data2$stats$base_stat[4],
sp_def = data2$stats$base_stat[5],
speed = data2$stats$base_stat[6],
type1 = data2$types$type$name[1],
type2 = data2$types$type$name[2]))
rbind(data.frame(name = data2$name,
base_experience = data2$base_experience,
height = data2$height,
weight = data2$weight,
hp = data2$stats$base_stat[1],
attack = data2$stats$base_stat[2],
defense = data2$stats$base_stat[3],
sp_atk = data2$stats$base_stat[4],
sp_def = data2$stats$base_stat[5],
speed = data2$stats$base_stat[6],
type1 = data2$types$type$name[1],
type2 = data2$types$type$name[2])
)
rbind(data.frame(name = data2$name,
base_experience = data2$base_experience,
height = data2$height,
weight = data2$weight,
hp = data2$stats$base_stat[1],
attack = data2$stats$base_stat[2],
defense = data2$stats$base_stat[3],
sp_atk = data2$stats$base_stat[4],
sp_def = data2$stats$base_stat[5],
speed = data2$stats$base_stat[6],
type1 = data2$types$type$name[1],
type2 = data2$types$type$name[2])
)
test[i,(1:11)] = rbind(data.frame(name = data2$name,
base_experience = data2$base_experience,
height = data2$height,
weight = data2$weight,
hp = data2$stats$base_stat[1],
attack = data2$stats$base_stat[2],
defense = data2$stats$base_stat[3],
sp_atk = data2$stats$base_stat[4],
sp_def = data2$stats$base_stat[5],
speed = data2$stats$base_stat[6],
type1 = data2$types$type$name[1],
type2 = data2$types$type$name[2]))
for(i in 1:10){
url <- data$results$url[i]
res = GET(url)
data2 = fromJSON(rawToChar(res$content))
test[i,(1:11)] = rbind(data.frame(name = data2$name,
base_experience = data2$base_experience,
height = data2$height,
weight = data2$weight,
hp = data2$stats$base_stat[1],
attack = data2$stats$base_stat[2],
defense = data2$stats$base_stat[3],
sp_atk = data2$stats$base_stat[4],
sp_def = data2$stats$base_stat[5],
speed = data2$stats$base_stat[6],
type1 = data2$types$type$name[1],
type2 = data2$types$type$name[2]))
}
test <- data.frame()
for(i in 1:10){
url <- data$results$url[i]
res = GET(url)
data2 = fromJSON(rawToChar(res$content))
test[i,] = rbind(data.frame(name = data2$name,
base_experience = data2$base_experience,
height = data2$height,
weight = data2$weight,
hp = data2$stats$base_stat[1],
attack = data2$stats$base_stat[2],
defense = data2$stats$base_stat[3],
sp_atk = data2$stats$base_stat[4],
sp_def = data2$stats$base_stat[5],
speed = data2$stats$base_stat[6],
type1 = data2$types$type$name[1],
type2 = data2$types$type$name[2]))
}
test
test
test
test <- data.frame()
test
for(i in 1:10){
url <- data$results$url[i]
res = GET(url)
data2 = fromJSON(rawToChar(res$content))
pokelist[i] = data.frame(name = data2$name,
base_experience = data2$base_experience,
height = data2$height,
weight = data2$weight,
hp = data2$stats$base_stat[1],
attack = data2$stats$base_stat[2],
defense = data2$stats$base_stat[3],
sp_atk = data2$stats$base_stat[4],
sp_def = data2$stats$base_stat[5],
speed = data2$stats$base_stat[6],
type1 = data2$types$type$name[1],
type2 = data2$types$type$name[2]))
for(i in 1:10){
url <- data$results$url[i]
res = GET(url)
data2 = fromJSON(rawToChar(res$content))
pokelist[i] = data.frame(name = data2$name,
base_experience = data2$base_experience,
height = data2$height,
weight = data2$weight,
hp = data2$stats$base_stat[1],
attack = data2$stats$base_stat[2],
defense = data2$stats$base_stat[3],
sp_atk = data2$stats$base_stat[4],
sp_def = data2$stats$base_stat[5],
speed = data2$stats$base_stat[6],
type1 = data2$types$type$name[1],
type2 = data2$types$type$name[2])
}
pokelist <- NULL
for(i in 1:10){
url <- data$results$url[i]
res = GET(url)
data2 = fromJSON(rawToChar(res$content))
pokelist[[i]] = data.frame(name = data2$name,
base_experience = data2$base_experience,
height = data2$height,
weight = data2$weight,
hp = data2$stats$base_stat[1],
attack = data2$stats$base_stat[2],
defense = data2$stats$base_stat[3],
sp_atk = data2$stats$base_stat[4],
sp_def = data2$stats$base_stat[5],
speed = data2$stats$base_stat[6],
type1 = data2$types$type$name[1],
type2 = data2$types$type$name[2])
}
do.call(rbind, pokelist)
for(i in 1:1025){
url <- data$results$url[i]
res = GET(url)
data2 = fromJSON(rawToChar(res$content))
pokelist[[i]] = data.frame(name = data2$name,
base_experience = data2$base_experience,
height = data2$height,
weight = data2$weight,
hp = data2$stats$base_stat[1],
attack = data2$stats$base_stat[2],
defense = data2$stats$base_stat[3],
sp_atk = data2$stats$base_stat[4],
sp_def = data2$stats$base_stat[5],
speed = data2$stats$base_stat[6],
type1 = data2$types$type$name[1],
type2 = data2$types$type$name[2])
}
do.call(rbind, pokelist)
reticulate::repl_python()
library(reticulate)
py_install(c("fastapi", "uvicorn"))
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
library(tidyverse)
library(devtools)
library(stringr)
scene_1 <- function(){
cat("It's your first day of college. You're moving into your dorm room today, and you're pretty scared. Not only do you not know any of your new roommates, but you'll be moving out of your mother's house for the first time.") #And to top it off, you're gay -- or at least bi -- and, even though the area seems pretty liberal, that doesn't mean a bunch of straight guys will want you living with them.")
par(ask = TRUE)
readline("<enter>")
cat("You're in the passenger seat of your mom's car, and she's just about to pull up to the loading dock by your dorm building. All your stuff, literally every object you care about in the world, is currently shoved into the cardboard boxes in the trunk and back seat. Your mom is waiting at a stop light. She looks at you. You can tell there's something she wants to say, or ask, but she isn't saying anything.")
input <- readline(prompt = "Enter command:")
if(input == "talk"){
cat("'Is something wrong?' you ask. \n\nYour mom smiles. 'I'm just thinking that I'll miss having you around the house,' she says. 'It will probably get lonely, rattling around that place all by myself.'")
readline("<enter>")
cat("You love your mom dearly, but she's always been a little too clingy, latched on to you a little too hard. You think the process of moving might almost be harder on her than it is on you. You're starting to feel kind of guilty, but luckily you're almost to the dorm building. You just say, 'I'll miss you too, mom,' and keep looking out the window.")
readline("<enter>")
}
if(input == "look"){
cat("Sometimes you get tired of always having to prompt your mom to talk. She does this thing where she waits until you're so uncomfortable that you have to ask. If you didn't know better you'd call it passive-aggressive. \n\nInstead, you look around the car. \n\nIt's a beat-up Honda Civic. Your mom's had it for as long as you can remember. Aside from its age and the fading upholstery, it's actually in pretty good shape. Your mom doesn't smoke, so there's no cigarette smell or anything.")
readline("<enter>")
cat("You can reach the passenger-side door pocket from here. You can also reach the glove compartment. Or you can give in and talk to your mom.")
input <- readline(prompt = "Enter command:")
if(str_detect(input, "glove") == TRUE){
cat("You open the glove compartment. \n\nThe handle is pretty dusty, your mom never opens this thing. There's a bunch of papers wadded up inside, mostly unpaid parking tickets and the car registration. There's also an unopened Almond Joy bar that's melted and misshapen. You remember putting that in there last time you borrowed the car. ... Oops.")
input <- readline(prompt = "Enter command:")
if((str_detect(input, ("candy|almond")) && str_detect(input, "take")) == TRUE){
candy <- TRUE
cat("You take the Almond Joy. \n\nYou probably shouldn't eat it, but the least you can do is take it out of your mom's glove compartment. \n\nYou can reach the passenger-side door pocket from here. Or you can give in and talk to your mom.")
}
input <- readline(prompt = "Enter command:")
if(str_detect(input, "paper|ticket|registration") == TRUE){
cat("You're a pretty nosy person as a rule, but you should probably leave that stuff alone. Or at least not go through it when your mom is literally sitting right next to you. \n\nYou can reach the passenger-side door pocket from here. Or you can give in and talk to your mom.")
}
}
input <- readline(prompt = "Enter command:")
if(str_detect(input, "pocket") == TRUE){
cat("You stick your hand into the pocket on the car door. \n\nYou're not sure why you did this. There's nothing in here. \n\nYou can reach the glove compartment, or you can give in and talk to your mom.")
}
if(str_detect(input, "eat") == TRUE){
input <- readline(prompt = "What are you trying to eat?\n\n")
if(candy == TRUE && str_detect(input, "candy|almond")){
cat("This seems like a questionable decision, but no one tells you what to do! \n\nYou open the candy bar. Your mom gives you a weird look. You put the candy in your mouth and eat it. \n\nIt tastes exactly as you'd expect an Almond Joy that sat in a hot glove compartment for at least a month to taste.")
question <- menu(title = "\n\nAre you proud of yourself?",
choices = c("yes", "no"))
if(question == 1){
cat("Well, your decisions may be questionable, but at least you're proud of them.")
}else{
cat("... Okay then!")
}
}
}
}
readline("<enter>")
cat("Your mom pulls up to the loading dock outside your new home. She sets the parking brake and says, a little too cheerfully, 'Well, we're here!' There are some people wearing bright green T-shirts navigating the nearby cars with clipboards, dollies, and various other moving equipment. You guess that those are the RAs -- residence hall advisors -- who can help you get settled.")
}
scene_1()
library(httr)
library(jsonlite)
library(tidyverse)
library(reticulate)
res <- GET("https://api.nasa.gov/neo/rest/v1/feed")
feed <- fromJSON(rawToChar(res$content))
feed
res <- GET("https://api.nasa.gov/neo/rest/v1/feed",
add_headers(Authorization = VSAKvIeHPwdtQbcjgARyVa4jowL7AHve9fd0vXR9))
res <- GET("https://api.nasa.gov/neo/rest/v1/feed",
add_headers(Authorization = "VSAKvIeHPwdtQbcjgARyVa4jowL7AHve9fd0vXR9"))
feed <- fromJSON(rawToChar(res$content))
feed
res <- GET("https://api.nasa.gov/neo/rest/v1/feed",
query(api_key = "VSAKvIeHPwdtQbcjgARyVa4jowL7AHve9fd0vXR9"))
res <- GET("https://api.nasa.gov/neo/rest/v1/feed", query = list(api_key = "VSAKvIeHPwdtQbcjgARyVa4jowL7AHve9fd0vXR9"))
feed <- fromJSON(rawToChar(res$content))
feed
res <- GET("https://api.nasa.gov/neo/rest/v1/feed", query = list(api_key = "VSAKvIeHPwdtQbcjgARyVa4jowL7AHve9fd0vXR9",
start_date = "2015-01-01",
end_date = "2015-01-01"))
feed <- fromJSON(rawToChar(res$content))
feed
feed <- fromJSON(rawToChar(res$content))
feed
View(feed)
feed['element_counts']
feed['element_count']
feed$near_earth_objects
res <- GET("https://api.nasa.gov/neo/rest/v1/feed", query = list(api_key = "VSAKvIeHPwdtQbcjgARyVa4jowL7AHve9fd0vXR9",
start_date = "2015-01-01",
end_date = "2015-01-01"))
rawToChar(res$content)
neo_json <- fromJSON(rawToChar(res$content))
neo_json
str(neo_json)
neo_json$element_count
neo_json$near_earth_objects
neo_json$near_earth_objects$`2015-01-01`
neo_json$near_earth_objects$`2015-01-01` %>% tibble()
neo_json$element_count
neo_json <- fromJSON(rawToChar(res\$content))
neo_json <- fromJSON(rawToChar(res$content))
neo_json$near_earth_objects$`2015-01-01`
neo_json$near_earth_objects$`2015-01-01` %>% names()
neo_attrs <- neo_json$near_earth_objects$`2015-01-01` %>% names()
res <- GET("https://api.nasa.gov/neo/rest/v1/feed", query = list(api_key = "VSAKvIeHPwdtQbcjgARyVa4jowL7AHve9fd0vXR9", start_date = "2015-01-01", end_date = "2015-01-02"))
res <- GET("https://api.nasa.gov/neo/rest/v1/feed", query = list(api_key = "VSAKvIeHPwdtQbcjgARyVa4jowL7AHve9fd0vXR9", start_date = "2015-01-01", end_date = "2015-01-02"))
neo_json <- fromJSON(rawToChar(res$content))
neo_json$near_earth_objects
neo_json$near_earth_objects
list(neo_json$near_earth_objects)
list(neo_json$near_earth_objects)
list(neo_json$near_earth_objects)[[1]]
do.call(rbind, list(neo_json$near_earth_objects))
list(neo_json$near_earth_objects)[[1]]
list(neo_json$near_earth_objects)[[1]] %>% tibble()
neo_json$near_earth_objects
dim(neo_json$near_earth_objects)
str(neo_json$near_earth_objects)
neo_json$near_earth_objects
neo_json$near_earth_objects %>% tibble()
neo_json$near_earth_objects %>% unlist()
neo_json$near_earth_objects %>% unlist() %>% tibble()
neo_json$near_earth_objects %>% unlist() %>% tibble() %>% View()
length(neo_json$near_earth_objects)
neo_json$near_earth_objects[[1]]
neo_json$near_earth_objects[[1]] %>% tibble()
get_neos_response <- function(start_date = NULL, end_date = NULL,
key = "VSAKvIeHPwdtQbcjgARyVa4jowL7AHve9fd0vXR9"){
res <- GET("https://api.nasa.gov/neo/rest/v1/feed", query = list(api_key = key, start_date = start_date, end_date = end_date))
neo_json <- fromJSON(rawToChar(res$content))
for(i in 1:(length(neo_json$near_earth_objects))){
neo_data[[i]] <- neo_json$near_earth_objects[[i]]
}
return(do.call(rbind, neo_data) %>% tibble())
}
get_neos_response(start_date = '1900-01-01', end_date = '1901-01-01')
neo_data <- NULL
get_neos_response <- function(start_date = NULL, end_date = NULL,
key = "VSAKvIeHPwdtQbcjgARyVa4jowL7AHve9fd0vXR9"){
neo_data <- NULL
res <- GET("https://api.nasa.gov/neo/rest/v1/feed", query = list(api_key = key, start_date = start_date, end_date = end_date))
neo_json <- fromJSON(rawToChar(res$content))
for(i in 1:(length(neo_json$near_earth_objects))){
neo_data[[i]] <- neo_json$near_earth_objects[[i]]
}
return(do.call(rbind, neo_data) %>% tibble())
}
get_neos_response(start_date = '1900-01-01', end_date = '1901-01-01')
get_neos_response(start_date = `1900-01-01`, end_date = `1901-01-01`)
get_neos_response(start_date = `2020-01-01`, end_date = `2021-01-01`)
get_neos_response(start_date = "2020-01-01", end_date = "2021-01-01")
start_date = "2020-01-01"
end_date = "2021-01-01"
key = "VSAKvIeHPwdtQbcjgARyVa4jowL7AHve9fd0vXR9"
res <- GET("https://api.nasa.gov/neo/rest/v1/feed", query = list(api_key = key, start_date = start_date, end_date = end_date))
neo_json <- fromJSON(rawToChar(res$content))
for(i in 1:(length(neo_json$near_earth_objects))){
neo_data[[i]] <- neo_json$near_earth_objects[[i]]
}
neo_data
neo_json
end_date = "2020-01-08"
res <- GET("https://api.nasa.gov/neo/rest/v1/feed", query = list(api_key = key, start_date = start_date, end_date = end_date))
neo_json <- fromJSON(rawToChar(res$content))
for(i in 1:(length(neo_json$near_earth_objects))){
neo_data[[i]] <- neo_json$near_earth_objects[[i]]
}
neo_data
do.call(rbind, neo_data) %>% tibble()
do.call(rbind, neo_data) %>% tibble()
do.call(rbind, neo_data)
neo_data
neo_data[[1]]
neo_data[[1]] %>% tibble()
neo_data[[2]] %>% tibble()
neo_data[[3]] %>% tibble()
unlist(neo_data)
tibble(neo_data)
neo_data[[2]] %>% tibble()
neo_data[[1]]
neo_data[[1]] %>% tibble() %>% select(close_approach_data)
neo_data[[1]]$close_approach_data[[1]]
res <- GET("https://api.tomorrow.io/v4/weather/forecast", query = list(location = "goleta", apikey = "KaYLTqTJ4tz6vushd5ou0rkyYj9fxIqv"))
fromJSON(rawToChar(res$content))
fromJSON(rawToChar(res$content))
fromJSON(rawToChar(res$content)) %>% tibble()
fromJSON(rawToChar(res$content))[[1]]
fromJSON(rawToChar(res$content))[[1]] %>% tibble()
fromJSON(rawToChar(res$content))[[1]][[1]]
fromJSON(rawToChar(res$content))[[1]][[1]] %>% tibble()
fromJSON(rawToChar(res$content))[[1]][[1]] %>% tibble() %>% select(humidity)
fromJSON(rawToChar(res$content))[[1]][[1]] %>% tibble()
fromJSON(rawToChar(res$content))[[1]][[1]] %>% tibble() %>% select('$humidity')
fromJSON(rawToChar(res$content))[[1]][[1]] %>% tibble() %>% select('values$humidity')
res <- GET("http://api.weatherapi.com/v1/current.json?key=62e7a62b37024174a57225738240910&q={location}&aqi=no", query = list(key = "62e7a62b37024174a57225738240910", q = "goleta", aqi = "no"))
fromJSON(rawToChar(res$content))
res <- GET("http://api.weatherapi.com/v1/current.json?key=62e7a62b37024174a57225738240910&q={location}&aqi=no", query = list(key = "62e7a62b37024174a57225738240910", q = "goleta"))
fromJSON(rawToChar(res$content))
VSAKvIeHPwdtQbcjgARyVa4jowL7AHve9fd0vXR9
res <- GET("http://api.weatherapi.com/v1/current.json", query = list(key = "62e7a62b37024174a57225738240910", q = "goleta"))
res <- GET("http://api.weatherapi.com/v1/current.json", query = list(key = "62e7a62b37024174a57225738240910", q = "goleta"))
fromJSON(rawToChar(res$content))
res <- GET("http://api.weatherapi.com/v1/current.json", query = list(key = "62e7a62b37024174a57225738240910", q = "beijing"))
fromJSON(rawToChar(res$content))
res <- GET("http://api.weatherapi.com/v1/current.json", query = list(key = "62e7a62b37024174a57225738240910", q = "beijing", days = 10))
fromJSON(rawToChar(res$content))
fromJSON(rawToChar(res$content))
fromJSON(rawToChar(res$content)) %>% str()
res <- GET("http://api.weatherapi.com/v1/forecast.json", query = list(key = "62e7a62b37024174a57225738240910", q = "beijing", days = 10))
fromJSON(rawToChar(res$content))
res$content
res <- GET("http://api.weatherapi.com/v1/current.json", query = list(key = "62e7a62b37024174a57225738240910", q = "beijing"))
fromJSON(rawToChar(res$content))
fromJSON(rawToChar(res$content)) %>% str()
res <- GET("http://api.weatherapi.com/v1/current.json", query = list(key = "62e7a62b37024174a57225738240910", q = "beijing", aqi = "yes"))
fromJSON(rawToChar(res$content)) %>% str()
res <- GET("http://api.weatherapi.com/v1/current.json", query = list(key = "62e7a62b37024174a57225738240910"))
fromJSON(rawToChar(res$content))
res <- GET("http://api.weatherapi.com/v1/current.json", query = list(key = "62e7a62b37024174a57225738240910", q = "53,-0.12"))
fromJSON(rawToChar(res$content))
res <- GET("http://api.weatherapi.com/v1/current.json", query = list(key = "62e7a62b37024174a57225738240910",q = "34.436, 119.828"))
fromJSON(rawToChar(res$content))
round(34.436, 3)
res <- GET("http://api.weatherapi.com/v1/current.json", query = list(key = "62e7a62b37024174a57225738240910",q = "119.828, 34.436"))3
res <- GET("http://api.weatherapi.com/v1/current.json", query = list(key = "62e7a62b37024174a57225738240910",q = "119.828, 34.436"))
fromJSON(rawToChar(res$content))
res <- GET("http://api.weatherapi.com/v1/current.json", query = list(key = "62e7a62b37024174a57225738240910",q = "34.44, 119.83"))
fromJSON(rawToChar(res$content))
res <- GET("http://api.weatherapi.com/v1/current.json", query = list(key = "62e7a62b37024174a57225738240910",q = "34.432961, -119.85687"))
fromJSON(rawToChar(res$content))
res <- GET("http://api.weatherapi.com/v1/current.json", query = list(key = "62e7a62b37024174a57225738240910",q = "34.432961, -119.856870"))
fromJSON(rawToChar(res$content))
res <- GET("http://api.weatherapi.com/v1/current.json", query = list(key = "62e7a62b37024174a57225738240910",q = "34.432961, -119.856870", aqi = "yes"))
fromJSON(rawToChar(res$content))
res <- GET("http://api.weatherapi.com/v1/current.json", query = list(key = "62e7a62b37024174a57225738240910",q = "beijing", aqi = "yes"))
fromJSON(rawToChar(res$content))
res <- GET("http://api.weatherapi.com/v1/current.json", query = list(key = "62e7a62b37024174a57225738240910",q = "lahore", aqi = "yes"))
fromJSON(rawToChar(res$content))
res <- GET("http://api.weatherapi.com/v1/current.json", query = list(key = "62e7a62b37024174a57225738240910",q = "34.432961, -119.856870", aqi = "yes"))
fromJSON(rawToChar(res$content))
output <-fromJSON(rawToChar(res$content))
output$current
output$current$air_quality
output$current$air_quality %>% tibble()
output$current$air_quality
longitude <- round(runif(n = 50, min = -100, max = 100), digits = 6)
longitude
set.seed("3435")
longitude <- round(runif(n = 50, min = -100, max = 100),
digits = 6)
longitude
latitude <- round(runif(n = 50, min = -90, max = 90),
digits = 6)
latitude
set.seed("3435")
longitude <- round(runif(n = 50, min = -100, max = 100),
digits = 6)
longitude
latitude <- round(runif(n = 50, min = -90, max = 90),
digits = 6)
latitude
set.seed("3435")
latitude <- round(runif(n = 50, min = -90, max = 90),
digits = 6)
latitude
set.seed(3435)
longitude <- round(runif(n = 50, min = -100, max = 100),
digits = 6)
longitude <- round(runif(n = 50, min = -100, max = 100),
digits = 6); mean(longitude)
latitude <- round(runif(n = 50, min = -90, max = 90),
digits = 6); mean(latitude)
set.seed(3435)
longitude <- round(runif(n = 50, min = -100, max = 100),
digits = 6); mean(longitude)
latitude <- round(runif(n = 50, min = -90, max = 90),
digits = 6); mean(latitude)
set.seed(3435)
longitude <- round(runif(n = 50, min = -100, max = 100),
digits = 6); mean(longitude)
latitude <- round(runif(n = 50, min = -90, max = 90),
digits = 6); mean(latitude)
set.seed(3435)
longitude <- round(runif(n = 50, min = -100, max = 100),
digits = 6); mean(longitude)
latitude <- round(runif(n = 50, min = -90, max = 90),
digits = 6); mean(latitude)
set.seed(3435)
longitude <- round(runif(n = 50, min = -100, max = 100),
digits = 6); mean(longitude)
latitude <- round(runif(n = 50, min = -90, max = 90),
digits = 6); mean(latitude)
longitude <- round(runif(n = 50, min = -100, max = 100),
digits = 6); mean(longitude)
latitude <- round(runif(n = 50, min = -90, max = 90),
digits = 6); mean(latitude)
longitude <- round(runif(n = 50, min = -100, max = 100),
digits = 6); mean(longitude)
latitude <- round(runif(n = 50, min = -90, max = 90),
digits = 6); mean(latitude)
longitude <- round(runif(n = 50, min = -100, max = 100),
digits = 6); mean(longitude)
latitude <- round(runif(n = 50, min = -90, max = 90),
digits = 6); mean(latitude)
set.seed(3435)
longitude <- round(runif(n = 50, min = -100, max = 100),
digits = 6); mean(longitude)
latitude <- round(runif(n = 50, min = -90, max = 90),
digits = 6); mean(latitude)
url <- "https://www.imdb.com/chart/boxoffice/"
html <- read_html(url)
library(tidyver)
library(tidyverse)
html <- read_html(url)
library(rvest)
html <- read_html(url)
table <- html |>
html_element("table") |>
html_table()
table
html
html |>
html_element("table")
html |>
html_element("body")
url <- "https://books.toscrape.com/"
library(tidyverse)
library(rvest)
html <- read_html(url)
table <- html |>
html_element("body") |>
html_table()
table
html |>
html_element("body")
reticulate::repl_python()
