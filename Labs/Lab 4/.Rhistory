"United Sttes", "United states of america", "United statew",
"uS", "uSA", "united stated", "united states of america",
"america", "UsA", "Untied States", "Unted States", "Uniyes States",
"Unitied States", "San Francisco", "California")
uk <- c("United Kingdom", "UK", "England, UK", "uk", "U.K.", "Uk",
"United Kindom", "United Kingdom.", "United Kingdomk",
"UK (Northern Ireland)", "U.K", "U.K. (northern England)",
"England/UK", "England, UK.", "United Kingdom (England)",
"UK (England)", "Scotland, UK", "United kingdom", "united kingdom",
"England, United Kingdom", "Wales (UK)", "Wales (United Kingdom)",
"Wales, UK", "England", "Scotland", "Wales", "Northern Ireland",
"Northern Ireland, United Kingdom", "Great Britain")
canada <- c("Canada", "canada", "CANADA", "Canda", "Canad",
"Canada, Ottawa, ontario", "Canadw")
netherlands <- c("Netherlands", "The Netherlands", "netherlands",
"The netherlands", "Nederland", "the Netherlands",
"the netherlands")
new_zealand <- c("New Zealand", "NZ", "New zealand", "new zealand")
salarydata <- salarydata %>%
mutate(country_new = case_when(
country %in% us ~ "USA",
country %in% uk ~ "UK",
country %in% canada ~ "Canada",
country %in% netherlands ~ "Netherlands",
country %in% new_zealand ~ "New Zealand",
.default = country
))
salarydata %>%
group_by(country_new) %>%
count() %>%
arrange(desc(n)) %>%
kbl() %>%
scroll_box(width = "300px", height = "400px")
salarydata <- salarydata %>%
group_by(country_new) %>%
add_count() %>%
filter(n > 10) %>%
select(-c(country, n)) %>%
ungroup()
salarydata %>%
group_by(country_new) %>%
count() %>%
arrange(desc(n)) %>%
kbl() %>%
scroll_box(width = "300px", height = "400px")
salarydata %>%
group_by(country_new) %>%
count()
salarydata %>%
group_by(country_new) %>%
count() %>%
arrange(desc(n)) %>%
kbl() %>%
scroll_box(width = "300px", height = "400px")
salarydata %>%
ggplot(aes(x = fct_infreq(country))) +
geom_bar()
salarydata %>%
ggplot(aes(x = fct_infreq(country_new))) +
geom_bar()
salarydata %>%
ggplot(aes(y = fct_infreq(country_new))) +
geom_bar()
salarydata %>%
group_by(country_new) %>%
mean(salary_in_usd)
salarydata %>%
group_by(country_new) %>%
summarise(mean(salary_in_usd))
salarydata %>%
group_by(country_new) %>%
summarise(avg_salary = mean(salary_in_usd)) %>%
arrange(desc(avg_salary))
salarydata %>%
ggplot(aes(y = fct_infreq(country_new))) +
geom_bar(stat = "summary")
salarydata %>%
ggplot(aes(y = fct_infreq(country_new))) +
geom_bar(stat = "summary", fun.x = "mean")
salarydata %>%
ggplot(aes(y = fct_infreq(country_new))) +
geom_bar(stat = "summary", fun = "mean")
salarydata %>%
ggplot(aes(x = fct_infreq(country_new))) +
geom_bar(stat = "summary", fun = "mean")
salarydata %>%
ggplot(aes(x = fct_infreq(country_new)), stat = "summary", fun = "mean") +
geom_bar()
salarydata %>%
ggplot(aes(x = fct_infreq(country_new))) +
geom_bar(stat = "summary", fun = "mean")
salarydata %>%
ggplot(aes(x = fct_infreq(country_new), y = salary_in_usd)) +
geom_bar(stat = "summary", fun = "mean")
salarydata %>%
ggplot(aes(y = fct_infreq(country_new), x = salary_in_usd)) +
geom_bar(stat = "summary", fun = "mean")
salarydata %>%
ggplot(aes(y = country_new, x = salary_in_usd)) +
geom_bar(stat = "summary", fun = "mean")
salarydata %>%
ggplot(aes(y = reorder(country_new, mean(salary_in_usd)), x = salary_in_usd)) +
geom_bar(stat = "summary", fun = "mean")
salarydata %>%
ggplot(aes(y = reorder(country_new, salary_in_usd), x = salary_in_usd)) +
geom_bar(stat = "summary", fun = "mean")
salarydata %>%
ggplot(aes(y = reorder(country_new, salary_in_usd), x = salary_in_usd)) +
geom_bar(stat = "summary", fun = "mean")
salarydata %>%
ggplot(aes(y = reorder(country_new, salary_in_usd), x = salary_in_usd)) +
geom_bar(stat = "summary", fun = "mean") %>%
labs(x = "Mean Annual Salary (USD)",
y = "Country")
salarydata %>%
ggplot(aes(y = reorder(country_new, salary_in_usd), x = salary_in_usd)) +
geom_bar(stat = "summary", fun = "mean") %>%
labs(x = "Mean Annual Salary (USD)",
y = "Country")
salarydata %>%
ggplot(aes(y = reorder(country_new, salary_in_usd), x = salary_in_usd)) +
geom_bar(stat = "summary", fun = "mean")
salarydata %>%
ggplot(aes(y = reorder(country_new, salary_in_usd), x = salary_in_usd)) +
geom_bar(stat = "summary", fun = "mean") %>%
labs(x = "Salary")
salarydata %>%
ggplot(aes(y = reorder(country_new, salary_in_usd), x = salary_in_usd)) +
geom_bar(stat = "summary", fun = "mean") +
labs(x = "Salary")
salarydata %>%
ggplot(aes(y = reorder(country_new, salary_in_usd), x = salary_in_usd)) +
geom_bar(stat = "summary", fun = "mean") +
labs(x = "Mean Annual Salary (USD)", y = "Country")
salarydata %>%
ggplot(aes(y = gender)) + geom_bar()
salarydata <- salarydata %>%
mutate(gender = case_when(
gender == "Prefer not to answer" ~ "Other or prefer not to answer",
is.na(gender) ~ "Other or prefer not to answer",
.default = gender
))
salarydata %>%
ggplot(aes(y = fct_infreq(gender))) + geom_bar()
salary_cleaned %>%
ggplot(aes(y = reorder(gender, salary_in_usd,
FUN = median),
x = salary_in_usd)) + geom_boxplot() +
geom_violin()
salarydata %>%
ggplot(aes(y = reorder(gender, salary_in_usd,
FUN = median),
x = salary_in_usd)) + geom_boxplot() +
geom_violin()
salarydata %>%
ggplot(aes(y = reorder(gender, salary_in_usd,
FUN = median),
x = salary_in_usd)) +
geom_violin()
salarydata %>%
ggplot(aes(y = reorder(gender, salary_in_usd,
FUN = median),
x = salary_in_usd)) +
geom_boxplot()
salarydata
salarydata %>%
ggplot(aes(y = fct_infreq(country_new))) +
geom_bar() +
labs(x = "Count", y = "Country")
salarydata %>%
ggplot(aes(y = fct_infreq(gender))) + geom_bar() +
labs(x = "Count", y = "Gender")
salarydata %>%
ggplot(aes(y = reorder(gender, salary_in_usd,
FUN = median),
x = salary_in_usd)) +
geom_boxplot() +
labs(x = "Annual Salary (USD)", y = "Gender")
salarydata %>%
ggplot(aes(y = fct_infreq(educ))) + geom_bar()
salarydata <- salarydata %>%
mutate(educ = case_when(
is.na(educ) ~ "Other",
.default = educ
))
salarydata
salarydata %>%
ggplot(aes(y = industry)) +
geom_bar()
salarydata %>%
group_by(industry) %>%
count() %>%
arrange(desc(n))
df <- salarydata
collapse_levels <- function(df, column, threshold = 0.2) {
# Extract unique levels
unique_levels <- unique(df[[column]])
# Create a distance matrix
dist_matrix <- stringdist::stringdistmatrix(unique_levels, method = "jw") # Jaro-Winkler distance
# Convert to a data frame for easier manipulation
dist_df <- as.data.frame(as.table(dist_matrix))
colnames(dist_df) <- c("level1", "level2", "distance")
# Create clusters based on distance threshold
clusters <- dist_df %>%
filter(distance < threshold) %>%
select(level1, level2) %>%
distinct()
# Create a mapping of levels
mapping <- unique_levels
for (i in seq_len(nrow(clusters))) {
mapping[which(mapping == clusters$level2[i])] <- clusters$level1[i]
}
# Apply mapping to the original factor levels
df[[column]] <- factor(mapping[match(df[[column]], unique_levels)])
return(df)
}
df_collapsed <- collapse_levels(df, "industry", threshold = 0.2)
install.packages("stringdist")
library(stringdist)
df_collapsed <- collapse_levels(df, "industry", threshold = 0.2)
df
column <- "industry"
unique_levels <- unique(df[[column]])
unique_levels
# Create a distance matrix
dist_matrix <- stringdist::stringdistmatrix(unique_levels, method = "jw") # Jaro-Winkler distance
dist_matrix
dist_df <- as.data.frame(as.table(dist_matrix))
colnames(dist_df) <- c("level1", "level2", "distance")
dist_df
# Convert to a data frame for easier manipulation
dist_df <- as.data.frame(as.table(dist_matrix))
colnames(dist_df) <- c("level1", "level2", "distance")
# Create clusters based on distance threshold
clusters <- dist_df %>%
filter(distance < threshold) %>%
select(level1, level2) %>%
distinct()
df_collapsed <- collapse_levels(df, "industry", threshold = 0.2)
unique_levels <- unique(as.character(df[[column]]))
# Create a distance matrix
dist_matrix <- stringdist::stringdistmatrix(unique_levels, method = "jw") # Jaro-Winkler distance
# Create a data frame from the distance matrix
dist_df <- as.data.frame(as.table(dist_matrix))
colnames(dist_df) <- c("level1", "level2", "distance")
dim(dist_df)
colnames(dist_df) <- c("level1", "distance")
# Create clusters based on distance threshold
clusters <- dist_df %>%
filter(distance < threshold) %>%
select(level1, level2) %>%
distinct()
# Create clusters based on distance threshold
clusters <- dist_df %>%
filter(distance < threshold) %>%
select(level1) %>%
distinct()
unique_levels <- unique(as.character(df[[column]]))
levels_df <- data.frame(level = unique_levels)
levels_df
matched <- stringdist_inner_join(levels_df, levels_df, by = "level",
method = "jw", max_dist = threshold,
ignore_case = TRUE)
library(fuzzyjoin)
install.packages("fuzzyjoin")
library(fuzzyjoin)
# Perform fuzzy join on itself to find similar levels
matched <- stringdist_inner_join(levels_df, levels_df, by = "level",
method = "jw", max_dist = threshold,
ignore_case = TRUE)
levels_df
# Perform fuzzy join on itself to find similar levels
matched <- stringdist_inner_join(levels_df$level, levels_df$level,
method = "jw", max_dist = threshold,
ignore_case = TRUE)
# Perform fuzzy join on itself to find similar levels
matched <- stringdist_inner_join(factor(levels_df$level), factor(levels_df$level),
method = "jw", max_dist = threshold,
ignore_case = TRUE)
stringdist_inner_join(levels_df, levels_df, by = "level")
is.na(df)
levels_df %>% drop_na()
levels_df <- data.frame(level = unique_levels) %>% drop_na()
# Perform fuzzy join on itself to find similar levels
matched <- stringdist_inner_join(levels_df, levels_df, by = "level"),
stringdist_inner_join(levels_df, levels_df, by = "level")
# Perform fuzzy join on itself to find similar levels
matched <- stringdist_inner_join(levels_df, levels_df, by = "level",
method = "jw", max_dist = threshold,
ignore_case = TRUE)
threshold = 0.2
# Perform fuzzy join on itself to find similar levels
matched <- stringdist_inner_join(levels_df, levels_df, by = "level",
method = "jw", max_dist = threshold,
ignore_case = TRUE)
# Perform fuzzy join on itself to find similar levels
threshold <- 0.2
matched <- stringdist_inner_join(levels_df, levels_df, by = "level",
method = "jw", max_dist = threshold,
ignore_case = TRUE)
# Create a new mapping where all similar levels point to the first level in the pair
mapping <- matched %>%
group_by(level.x) %>%
summarise(level = first(level.y), .groups = 'drop') %>%
distinct()
mapping
# Map the original industry levels to their corresponding new levels
df[[column]] <- factor(mapping$level[match(as.character(df[[column]]), mapping$level.x)])
df$industry
df$industry %>% table()
# Perform fuzzy join on itself to find similar levels
threshold <- 0.5
matched <- stringdist_inner_join(levels_df, levels_df, by = "level",
method = "jw", max_dist = threshold,
ignore_case = TRUE)
matched <- stringdist_inner_join(levels_df, levels_df, by = "level",
method = "jw", max_dist = threshold,
ignore_case = TRUE)
# Create a new mapping where all similar levels point to the first level in the pair
mapping <- matched %>%
group_by(level.x) %>%
summarise(level = first(level.y), .groups = 'drop') %>%
distinct()
# Create a new mapping where all similar levels point to the first level in the pair
mapping <- matched %>%
group_by(level.x) %>%
summarise(level = first(level.y), .groups = 'drop') %>%
distinct()
# Map the original industry levels to their corresponding new levels
df[[column]] <- factor(mapping$level[match(as.character(df[[column]]), mapping$level.x)])
table(df$industry)
# Map the original industry levels to their corresponding new levels
df[[newindustry]] <- factor(mapping$level[match(as.character(df[[column]]), mapping$level.x)])
# Map the original industry levels to their corresponding new levels
df[[column]] <- factor(mapping$level[match(as.character(df[[column]]), mapping$level.x)])
table(df$industry)
df <- salarydata
df <- salarydata
unique_levels <- unique(as.character(df[[column]]))
levels_df <- data.frame(level = unique_levels) %>% drop_na()
install.packages("fuzzyjoin")
library(fuzzyjoin)
# Perform fuzzy join on itself to find similar levels
threshold <- 0.3
matched <- stringdist_inner_join(levels_df, levels_df, by = "level",
method = "jw", max_dist = threshold,
ignore_case = TRUE)
# Create a new mapping where all similar levels point to the first level in the pair
mapping <- matched %>%
group_by(level.x) %>%
summarise(level = first(level.y), .groups = 'drop') %>%
distinct()
# Map the original industry levels to their corresponding new levels
df[[column]] <- factor(mapping$level[match(as.character(df[[column]]), mapping$level.x)])
table(df$industry)
install.packages("fuzzyjoin")
df <- salarydata
unique_levels <- unique(as.character(df[[column]]))
levels_df <- data.frame(level = unique_levels) %>% drop_na()
# install.packages("fuzzyjoin")
# library(fuzzyjoin)
# Perform fuzzy join on itself to find similar levels
threshold <- 0.3
matched <- stringdist_inner_join(levels_df, levels_df, by = "level",
method = "jw", max_dist = threshold,
ignore_case = TRUE)
# Create a new mapping where all similar levels point to the first level in the pair
mapping <- matched %>%
group_by(level.x) %>%
summarise(level = first(level.y), .groups = 'drop') %>%
distinct()
# Map the original industry levels to their corresponding new levels
df[[column]] <- factor(mapping$level[match(as.character(df[[column]]), mapping$level.x)])
table(df$industry)
unique(as.character(df[[column]]))
df <- salarydata
unique_levels <- unique(as.character(df[[column]]))
levels_df <- data.frame(level = unique_levels) %>% drop_na()
# install.packages("fuzzyjoin")
# library(fuzzyjoin)
# Perform fuzzy join on itself to find similar levels
threshold <- 0.35
matched <- stringdist_inner_join(levels_df, levels_df, by = "level",
method = "jw", max_dist = threshold,
ignore_case = TRUE)
# Create a new mapping where all similar levels point to the first level in the pair
mapping <- matched %>%
group_by(level.x) %>%
summarise(level = first(level.y), .groups = 'drop') %>%
distinct()
# Map the original industry levels to their corresponding new levels
df[[column]] <- factor(mapping$level[match(as.character(df[[column]]), mapping$level.x)])
table(df$industry)
unique(as.character(df[[column]]))
# install.packages("fuzzyjoin")
# library(fuzzyjoin)
# Perform fuzzy join on itself to find similar levels
threshold <- 0.4
matched <- stringdist_inner_join(levels_df, levels_df, by = "level",
method = "jw", max_dist = threshold,
ignore_case = TRUE)
matched <- stringdist_inner_join(levels_df, levels_df, by = "level",
method = "jw", max_dist = threshold,
ignore_case = TRUE)
# Create a new mapping where all similar levels point to the first level in the pair
mapping <- matched %>%
group_by(level.x) %>%
summarise(level = first(level.y), .groups = 'drop') %>%
distinct()
# Map the original industry levels to their corresponding new levels
df[[column]] <- factor(mapping$level[match(as.character(df[[column]]), mapping$level.x)])
table(df$industry)
df %>%
group_by(industry) %>%
count() %>%
arrange(desc(n)) %>%
kbl() %>%
scroll_box(width = "300px", height = "400px")
df %>%
group_by(industry) %>%
count() %>%
arrange(desc(n)) %>%
kbl() %>%
scroll_box(width = "300px", height = "400px")
salarydata %>%
mutate(industry = fct_lump(industry, n = 10))
salarydata %>%
mutate(industry = fct_lump(industry, n = 10)) %>%
group_by(industry) %>%
count() %>%
arrange(desc(n))
salarydata %>%
mutate(industry = fct_lump(industry, n = 5)) %>%
group_by(industry) %>%
count() %>%
arrange(desc(n))
salarydata %>%
mutate(industry = fct_lump(industry, n = 20)) %>%
group_by(industry) %>%
count() %>%
arrange(desc(n))
salarydata %>%
mutate(industry = fct_lump(industry, n = 50)) %>%
group_by(industry) %>%
count() %>%
arrange(desc(n))
salarydata %>%
mutate(industry = fct_lump(industry, n = 30)) %>%
group_by(industry) %>%
count() %>%
arrange(desc(n))
salarydata %>%
mutate(industry = fct_lump(industry, n = 40)) %>%
group_by(industry) %>%
count() %>%
arrange(desc(n))
salarydata %>%
mutate(industry = fct_lump(industry, n = 40)) %>%
group_by(industry) %>%
add_count() %>%
filter(n > 100)
salarydata %>%
mutate(industry = fct_lump(industry, n = 40)) %>%
group_by(industry) %>%
add_count() %>%
filter(n > 100) %>%
count()
salarydata <- salarydata %>%
mutate(industry = fct_lump(industry, n = 40)) %>%
group_by(industry) %>%
add_count() %>%
filter(n > 100) %>%
ungroup()
salarydata %>%
group_by(industry) %>%
count() %>%
arrange(desc(n()))
salarydata %>%
group_by(industry) %>%
count() %>%
arrange(desc(n)) %>%
kbl() %>%
scroll_box(width = "300px", height = "400px")
salarydata$industry %>% levelS()
salarydata$industry %>% levels()
salarydata %>%
group_by(industry)
salarydata %>%
ggplot(aes(y = fct_infreq(industry))) +
geom_bar()
salarydata %>%
ggplot(aes(y = reorder(industry, salary_in_usd), x = salary_in_usd)) +
geom_bar(stat = "summary", fun = "mean") +
labs(x = "Mean Annual Salary (USD)", y = "Country")
salarydata %>%
ggplot(aes(y = reorder(industry, salary_in_usd), x = salary_in_usd)) +
geom_bar(stat = "summary", fun = "mean") +
labs(x = "Mean Annual Salary (USD)", y = "Industry Type")
salarydata
salarydata %>%
group_by(title) %>%
count() %>%
arrange(desc(n))
salarydata %>%
group_by(title) %>%
count() %>%
arrange(desc(n)) %>% print(n = 1000)
salarydata %>% table(us_state)
salarydata %>% select(us_state) %>%  table()
unique(as.character(salarydata[[us_state]]))
unique(as.character(salarydata[["us_state"]]))
reticulate::repl_python()
